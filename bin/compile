#!/usr/bin/env bash
# vim: ft=sh :

CPANM='https://raw.githubusercontent.com/miyagawa/cpanminus/master/cpanm'

main() {
   # fail fast and fail hard
   set -eo pipefail

   local BUILD_DIR="$(ensure_dir "$1")"
   local CACHE_DIR="$(ensure_dir "$2")"
   local ENV_DIR="$(ensure_dir "$3")"

   # not sure these actually make sense here, but they don't harm anyway
   export PATH="$BUILD_DIR/local/bin:$PATH"
   export PERL5LIB="$BUILD_DIR/local/lib/perl5;$PERL5LIB"

   # reuse last compilations if available
   copy_local "$CACHE_DIR" "$BUILD_DIR"

   # build what's necessary
   build "$BUILD_DIR" "$ENV_DIR"

   # save compilation in cache for future reuse
   [ -d "$BUILD_DIR/local" ] && copy_local "$BUILD_DIR" "$CACHE_DIR"

   # prepare files with environment for run stage
   prepare_run_environment "$BUILD_DIR"

   return 0
}

build() {
   local BUILD_DIR="$1"
   local ENV_DIR="$2"
   local invocation

   # execute in subshell to avoid change directory side effects
   (
      cd "$BUILD_DIR"
      local CPANM_OPTS=''
      [ -f "$ENV_DIR/PERL_CPANM_OPT" ] \
         && CPANM_OPTS="$(cat "$ENV_DIR/PERL_CPANM_OPT")"

      # if [ -e "$BUILD_DIR/.perl-verion" ] ; then
      #     PERL_VERSION=$( cat $BUILD_DIR/.perl-version )
      #
      #     if [ -
      # fi

      if [ ! -e "$BUILD_DIR/local/bin/cpanm" ]; then
         echo "-----> Bootstrapping cpanm"
         curl -L --silent "$CPANM"        \
            | perl - App::cpanminus 2>&1  \
               --quiet                    \
               --notest                   \
               --no-man-pages             \
               $CPANM_OPTS                \
               -l "$BUILD_DIR/local"      \
            | indent
      fi

      if [ ! -e "$BUILD_DIR/local/bin/carton" ]; then
         echo "-----> Installing carton"
         cpanm 2>&1                 \
            --quiet                 \
            --notest                \
            --no-man-pages          \
            -l "$BUILD_DIR/local"   \
            $CPANM_OPTS             \
            Carton@1.0.28           \
            | indent
      fi

      echo "-----> Checking hashbangs"
      head -1 $BUILD_DIR/local/bin/* | indent
      fixin_shebang
      head -1 $BUILD_DIR/local/bin/* | indent

      echo "-----> Installing dependencies"
      # declare -a EPAN
      # local _d d
      # for _d in epan dpan ; do
      #    d="$PWD/$_d"
      #    [ -d "$d" ] || continue
      #    EPAN=("${EPAN[@]}" '--mirror' "file://$d")
      # done
      # if [ "${#EPAN[@]}" -gt 0 ] ; then
      #    # append "usual" mirrors
      #    EPAN=("${EPAN[@]}" '--mirror' 'http://www.cpan.org')
      # fi

      # TODO: Carton mirror, etc
      carton install --deployment 2>&1 | indent
   )
}

prepare_run_environment() {
   local BUILD_DIR="$1"

   mkdir -p "$BUILD_DIR/.profile.d"
   cat > "$BUILD_DIR/.profile.d/perl-env.sh" <<'END'
export PATH="$HOME/local/bin:$HOME/bin:$PATH"
export PERL5LIB="$HOME/local/lib/perl5:$PERL5LIB"
END
}

copy_local() {
   local SOURCE_DIR="$1"
   local DESTINATION_DIR="$2"
   rm -rf "$DESTINATION_DIR/local"
   if [ -d "$SOURCE_DIR/local" ]; then
      cp -a "$SOURCE_DIR/local" "$DESTINATION_DIR"
   fi
}

ensure_dir() {
   mkdir -p "$1"
   readlink -f "$1"
}

indent() {
  sed -u 's/^/       /'
}

# because vendored perl is relocatable, shebang is not always correct
# https://github.com/Perl-Toolchain-Gang/ExtUtils-MakeMaker/issues/38
fixin_shebang() {
    for script in $BUILD_DIR/local/bin/* ; do
        perl -i -nle 's{^#!.*perl\s*$}{#!/usr/bin/env perl} unless $head++; print' $script
    done
}

main "$@"
